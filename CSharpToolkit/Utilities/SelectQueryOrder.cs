namespace CSharpToolkit.Utilities {
    using Abstractions;
    using DataAccess;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    /// <summary>
    /// Holds the information needed to produce a select query.
    /// </summary>
    public class SelectQueryOrder {

        /// <summary>
        /// Creates an order for the Select Query. Aliases are auto-generated.
        /// </summary>
        /// <param name="tableName">The source table for the select query.</param>
        /// <param name="tableAlias">The alias of this table for use in the query.</param>
        /// <param name="columns">The requested columns.</param>
        /// <param name="joinClause">The Clause used to perform join.</param>
        public SelectQueryOrder(string tableName, string tableAlias, IEnumerable<string> columns, Clause joinClause) : this(tableName, tableAlias, columns?.Select(c => new Tuple<string, string>(c, "")), joinClause, true) { }

        /// <summary>
        /// Creates an order for the Select Query. Aliases are auto-generated.
        /// </summary>
        /// <param name="tableName">The source table for the select query.</param>
        /// <param name="tableAlias">The alias of this table for use in the query.</param>
        /// <param name="columns">The requested columns.</param>
        /// <param name="joinClause">The Clause used to perform join.</param>
        /// <param name="autoGenerateAlias">Whether the aliases should be autogenerated.</param>
        public SelectQueryOrder(string tableName, string tableAlias, IEnumerable<string> columns, Clause joinClause, bool autoGenerateAlias) : this(tableName, tableAlias, columns?.Select(c => new Tuple<string, string>(c, "")), joinClause, autoGenerateAlias) { }

        /// <summary>
        /// Creates an order for the Select Query. Aliases are not auto-generated.
        /// </summary>
        /// <param name="tableName">The source table for the select query.</param>
        /// <param name="tableAlias">The alias of this table for use in the query.</param>
        /// <param name="columns">The requested columns.</param>
        /// <param name="joinClause">The Clause used to perform join.</param>
        public SelectQueryOrder(string tableName, string tableAlias, IEnumerable<Tuple<string, string>> columns, Clause joinClause) : this(tableName, tableAlias, columns, joinClause, false) { }

        /// <summary>
        /// Creates an order for the Select Query.
        /// </summary>
        /// <param name="tableName">The source table for the select query.</param>
        /// <param name="tableAlias">The alias of this table for use in the query.</param>
        /// <param name="columns">The requested columns.</param>
        /// <param name="joinClause">The Clause used to perform join.</param>
        /// <param name="autoGenerateAlias">Whether the aliases should be autogenerated.</param>
        public SelectQueryOrder(string tableName, string tableAlias, IEnumerable<Tuple<string, string>> columns, Clause joinClause, bool autoGenerateAlias) {
            var exceptionMessage = new List<string>();

            if (string.IsNullOrWhiteSpace(tableName))
                exceptionMessage.Add("The table name cannot be blank.");
            if (joinClause == null)
                exceptionMessage.Add("The join clause cannot be null.");

            if (exceptionMessage.Any())
                throw new ArgumentException(string.Join(" ", exceptionMessage));

            TableName = tableName;
            TableAlias = tableAlias?.Trim() ?? "";
            ColumnAliasPairs = columns?.ToArray() ?? new Tuple<string, string>[0];
            JoinClause = joinClause;
            AutoGenerateAliases = autoGenerateAlias;
        }

        /// <summary>
        /// Creates an order for the Select Query. Aliases are auto-generated.
        /// </summary>
        /// <param name="tableName">The source table for the select query.</param>
        /// <param name="tableAlias">The alias of this table for use in the query.</param>
        /// <param name="columns">The requested columns.</param>
        /// <param name="joinClause">The text used to perform join.</param>
        public SelectQueryOrder(string tableName, string tableAlias, IEnumerable<string> columns, string joinClause) : this(tableName, tableAlias, columns?.Select(c => new Tuple<string, string>(c, "")), joinClause, true) { }

        /// <summary>
        /// Creates an order for the Select Query.
        /// </summary>
        /// <param name="tableName">The source table for the select query.</param>
        /// <param name="tableAlias">The alias of this table for use in the query.</param>
        /// <param name="columns">The requested columns.</param>
        /// <param name="joinClause">The text used to perform join.</param>
        /// <param name="autoGenerateAlias">Whether the aliases should be autogenerated.</param>
        public SelectQueryOrder(string tableName, string tableAlias, IEnumerable<string> columns, string joinClause, bool autoGenerateAlias) : this(tableName, tableAlias, columns?.Select(c => new Tuple<string, string>(c, "")), joinClause, autoGenerateAlias) { }

        /// <summary>
        /// Creates an order for the Select Query. Aliases are not auto-generated.
        /// </summary>
        /// <param name="tableName">The source table for the select query.</param>
        /// <param name="tableAlias">The alias of this table for use in the query.</param>
        /// <param name="columns">The requested columns.</param>
        /// <param name="joinClause">The text used to perform join.</param>
        public SelectQueryOrder(string tableName, string tableAlias, IEnumerable<Tuple<string, string>> columns, string joinClause) : this(tableName, tableAlias, columns, joinClause, false) { }

        /// <summary>
        /// Creates an order for the Select Query.
        /// </summary>
        /// <param name="tableName">The source table for the select query.</param>
        /// <param name="tableAlias">The alias of this table for use in the query.</param>
        /// <param name="columns">The requested columns.</param>
        /// <param name="joinClause">The text used to perform join.</param>
        /// <param name="autoGenerateAlias">Whether the aliases should be autogenerated.</param>
        public SelectQueryOrder(string tableName, string tableAlias, IEnumerable<Tuple<string, string>> columns, string joinClause, bool autoGenerateAlias) {
            var exceptionMessage = new List<string>();

            if (string.IsNullOrWhiteSpace(tableName))
                exceptionMessage.Add("The table name cannot be blank.");
            if (string.IsNullOrWhiteSpace(joinClause))
                exceptionMessage.Add("The join clause cannot be blank.");

            if (exceptionMessage.Any())
                throw new ArgumentException(string.Join(" ", exceptionMessage));

            TableName = tableName;
            TableAlias = tableAlias?.Trim() ?? "";
            ColumnAliasPairs = columns?.ToArray() ?? new Tuple<string, string>[0];
            JoinClause = Clause.New().AddClause(joinClause);
            AutoGenerateAliases = autoGenerateAlias;
        }

        /// <summary>
        /// Creates an order for the Select Query. Aliases are auto-generated.
        /// </summary>
        /// <param name="tableName">The source table for the select query.</param>
        /// <param name="tableAlias">The alias of this table for use in the query.</param>
        /// <param name="columns">The requested columns.</param>
        public SelectQueryOrder(string tableName, string tableAlias, IEnumerable<string> columns) : this(tableName, tableAlias, columns?.Select(c => new Tuple<string, string>(c, "")), true) { }

        /// <summary>
        /// Creates an order for the Select Query.
        /// </summary>
        /// <param name="tableName">The source table for the select query.</param>
        /// <param name="tableAlias">The alias of this table for use in the query.</param>
        /// <param name="columns">The requested columns.</param>
        /// <param name="autoGenerateAlias">Whether the aliases should be autogenerated.</param>
        public SelectQueryOrder(string tableName, string tableAlias, IEnumerable<string> columns, bool autoGenerateAlias) : this(tableName, tableAlias, columns?.Select(c => new Tuple<string, string>(c, "")), autoGenerateAlias) { }

        /// <summary>
        /// Creates an order for the Select Query. Aliases are not auto-generated.
        /// </summary>
        /// <param name="tableName">The source table for the select query.</param>
        /// <param name="tableAlias">The alias of this table for use in the query.</param>
        /// <param name="columns">The requested columns.</param>
        public SelectQueryOrder(string tableName, string tableAlias, IEnumerable<Tuple<string, string>> columns) : this(tableName, tableAlias, columns, false) { }

        /// <summary>
        /// Creates an order for the Select Query.
        /// </summary>
        /// <param name="tableName">The source table for the select query.</param>
        /// <param name="tableAlias">The alias of this table for use in the query.</param>
        /// <param name="columns">The requested columns.</param>
        /// <param name="autoGenerateAlias">Whether the aliases should be autogenerated.</param>
        public SelectQueryOrder(string tableName, string tableAlias, IEnumerable<Tuple<string, string>> columns, bool autoGenerateAlias) {
            if (string.IsNullOrWhiteSpace(tableName))
                throw new ArgumentException("The table name cannot be blank.");
            TableName = tableName;
            TableAlias = tableAlias?.Trim() ?? "";
            ColumnAliasPairs = columns?.ToArray() ?? new Tuple<string, string>[0];
            JoinClause = Clause.New();
            AutoGenerateAliases = autoGenerateAlias;
        }

        /// <summary>
        /// Creates an order for the Select Query. Aliases are auto-generated.
        /// </summary>
        /// <param name="tableName">The source table for the select query.</param>
        /// <param name="tableAlias">The alias of this table for use in the query.</param>
        /// <param name="columns">The requested columns.</param>
        /// <param name="joinColumn">The column of this table that is matched with the column of the foreign key.</param>
        /// <param name="foreignKey">The foreign key for which to match this table with. The Key is the alias of the table, and the Value is the column of that table that is matched with the JoinColumn of this table.</param>
        public SelectQueryOrder(string tableName, string tableAlias, IEnumerable<string> columns, string joinColumn, KeyValuePair<string, string> foreignKey) : this(tableName, tableAlias, columns, joinColumn, foreignKey, true) { }

        /// <summary>
        /// Creates an order for the Select Query.
        /// </summary>
        /// <param name="tableName">The source table for the select query.</param>
        /// <param name="tableAlias">The alias of this table for use in the query.</param>
        /// <param name="columns">The requested columns.</param>
        /// <param name="joinColumn">The column of this table that is matched with the column of the foreign key.</param>
        /// <param name="foreignKey">The foreign key for which to match this table with. The Key is the alias of the table, and the Value is the column of that table that is matched with the JoinColumn of this table.</param>
        /// <param name="autoGenerateAlias">Whether the aliases should be autogenerated.</param>
        public SelectQueryOrder(string tableName, string tableAlias, IEnumerable<string> columns, string joinColumn, KeyValuePair<string, string> foreignKey, bool autoGenerateAlias) : this(tableName, tableAlias, columns?.Select(c => new Tuple<string, string>(c, "")), joinColumn, foreignKey, autoGenerateAlias) { }

        /// <summary>
        /// Creates an order for the Select Query. Aliases are not auto-generated.
        /// </summary>
        /// <param name="tableName">The source table for the select query.</param>
        /// <param name="tableAlias">The alias of this table for use in the query.</param>
        /// <param name="columns">The requested columns, and aliases.</param>
        /// <param name="joinColumn">The column of this table that is matched with the column of the foreign key.</param>
        /// <param name="foreignKey">The foreign key for which to match this table with. The Key is the alias of the table, and the Value is the column of that table that is matched with the JoinColumn of this table.</param>
        public SelectQueryOrder(string tableName, string tableAlias, IEnumerable<Tuple<string, string>> columns, string joinColumn, KeyValuePair<string, string> foreignKey) : this(tableName, tableAlias, columns, joinColumn, foreignKey, false) { }

        /// <summary>
        /// Creates an order for the Select Query.
        /// </summary>
        /// <param name="tableName">The source table for the select query.</param>
        /// <param name="tableAlias">The alias of this table for use in the query.</param>
        /// <param name="columns">The requested columns, and aliases.</param>
        /// <param name="joinColumn">The column of this table that is matched with the column of the foreign key.</param>
        /// <param name="foreignKey">The foreign key for which to match this table with. The Key is the alias of the table, and the Value is the column of that table that is matched with the JoinColumn of this table.</param>
        /// <param name="autoGenerateAlias">Whether the aliases should be autogenerated.</param>
        public SelectQueryOrder(string tableName, string tableAlias, IEnumerable<Tuple<string, string>> columns, string joinColumn, KeyValuePair<string, string> foreignKey, bool autoGenerateAlias) {
            var exceptionMessage = new List<string>();

            if (string.IsNullOrWhiteSpace(tableName))
                exceptionMessage.Add("The table name cannot be blank.");
            if (string.IsNullOrWhiteSpace(joinColumn))
                exceptionMessage.Add("JoinColumn should be the column used to perform join. Currently, it is blank.");
            if (string.IsNullOrWhiteSpace(foreignKey.Key) || string.IsNullOrWhiteSpace(foreignKey.Value))
                exceptionMessage.Add("The foreign key should be the table alias, or name and the column for which the join should match on.");

            if (exceptionMessage.Any())
                throw new ArgumentException(string.Join(" ", exceptionMessage));

            TableName = tableName.Trim();
            TableAlias = tableAlias?.Trim() ?? "";
            ColumnAliasPairs = columns?.ToArray() ?? new Tuple<string, string>[0];
            JoinClause = Clause.New().AddClause($"{WorkingTableName}.{joinColumn} = {foreignKey.Key}.{foreignKey.Value}");
            AutoGenerateAliases = autoGenerateAlias;
        }

        /// <summary>
        /// The source table for the select query.
        /// </summary>
        public string TableName { get; }

        /// <summary>
        /// The alias of this table for use in the query.
        /// </summary>
        public string TableAlias { get; }

        /// <summary>
        /// The requested column, and alias pairs.
        /// </summary>
        public Tuple<string, string>[] ColumnAliasPairs { get; }

        /// <summary>
        /// The clause which determines how the join is performed.
        /// </summary>
        public Clause JoinClause { get; }

        /// <summary>
        /// The clause which determines how the join is performed.
        /// </summary>
        public IJoinType JoinType { get; set; } = NullJoin.Instance;

        /// <summary>
        /// Returns working table name which is the <see cref="TableAlias"/> if it exists, and if not, <see cref="TableName"/>.
        /// </summary>
        public string WorkingTableName =>
            string.IsNullOrWhiteSpace(TableAlias) ? TableName : TableAlias;

        /// <summary>
        /// Whether or not aliases are auto-generated or not.
        /// </summary>
        public bool AutoGenerateAliases { get; }

        /// <summary>
        /// Used to produce a table definition, which is <see cref="TableName"/> with, if legal, the <see cref="TableAlias"/> appended with a space.
        /// </summary>
        public string TableDefinition =>
            $" {TableName}{(string.IsNullOrEmpty(TableAlias) || TableName == TableAlias ? "" : $" {TableAlias}")}";

    }
}