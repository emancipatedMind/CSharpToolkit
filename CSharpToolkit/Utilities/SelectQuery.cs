namespace CSharpToolkit.Utilities {
    using Abstractions;
    using DataAccess;
    using DataAccess.Abstractions;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    /// <summary>
    /// A mechanism for creating simple select queries.
    /// </summary>
    public class SelectQuery {

        static SelectQueryBuildOptions DefaultOptions = new SelectQueryBuildOptions();

        List<SelectQueryOrder> _orders;

        private SelectQuery(IEnumerable<SelectQueryOrder> oldOrders, SelectQueryOrder nextOrder) : this(oldOrders.Concat(new [] { nextOrder }) )  { }

        private SelectQuery(IEnumerable<SelectQueryOrder> oldOrders) {
            _orders = new List<SelectQueryOrder>(oldOrders);
        }

        /// <summary>
        /// Creates a new select query.
        /// </summary>
        /// <param name="order">The order specifying the information for the primary data source.</param>
        /// <returns>A new select query.</returns>
        public static SelectQuery New(SelectQueryOrder order) =>
            new SelectQuery(new[] { order });

        /// <summary>
        /// Creates a new select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <returns>A new select query.</returns>
        public static SelectQuery New(string tableName) =>
            New(tableName, "", new string[0], true);

        /// <summary>
        /// Creates a new select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names.</param>
        /// <returns>A new select query.</returns>
        public static SelectQuery New(string tableName, IEnumerable<string> columns) =>
            New(tableName, "", columns?.Select(c => new Tuple<string, string>(c, "")), true);

        /// <summary>
        /// Creates a new select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="autoGenerateAlias">Whether the aliases should be autogenerated.</param>
        /// <returns>A new select query.</returns>
        public static SelectQuery New(string tableName, IEnumerable<string> columns, bool autoGenerateAlias) =>
            New(tableName, "", columns?.Select(c => new Tuple<string, string>(c, "")), autoGenerateAlias);

        /// <summary>
        /// Creates a new select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names.</param>
        /// <returns>A new select query.</returns>
        public static SelectQuery New(string tableName, string tableAlias, IEnumerable<string> columns) =>
            New(tableName, tableAlias, columns?.Select(c => new Tuple<string, string>(c, "")), true);

        /// <summary>
        /// Creates a new select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="autoGenerateAlias">Whether the aliases should be autogenerated.</param>
        /// <returns>A new select query.</returns>
        public static SelectQuery New(string tableName, string tableAlias, IEnumerable<string> columns, bool autoGenerateAlias) =>
            New(tableName, tableAlias, columns?.Select(c => new Tuple<string, string>(c, "")), autoGenerateAlias);

        /// <summary>
        /// Creates a new select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names.</param>
        /// <returns>A new select query.</returns>
        public static SelectQuery New(string tableName, IEnumerable<Tuple<string, string>> columns) =>
            New(tableName, "", columns, false);

        /// <summary>
        /// Creates a new select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="autoGenerateAlias">Whether the aliases should be autogenerated.</param>
        /// <returns>A new select query.</returns>
        public static SelectQuery New(string tableName, IEnumerable<Tuple<string, string>> columns, bool autoGenerateAlias) =>
            New(tableName, "", columns, autoGenerateAlias);

        /// <summary>
        /// Creates a new select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names.</param>
        /// <returns>A new select query.</returns>
        public static SelectQuery New(string tableName, string tableAlias, IEnumerable<Tuple<string, string>> columns) =>
            New(tableName, tableAlias, columns, false);

        /// <summary>
        /// Creates a new select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="autoGenerateAlias">Whether the aliases should be autogenerated.</param>
        /// <returns>A new select query.</returns>
        public static SelectQuery New(string tableName, string tableAlias, IEnumerable<Tuple<string, string>> columns, bool autoGenerateAlias) =>
            New(new SelectQueryOrder(tableName, tableAlias, columns, autoGenerateAlias));

        /// <summary>
        /// Add a left join to the select query.
        /// </summary>
        /// <param name="order">The order specifying the information for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddLeftJoin(SelectQueryOrder order) =>
            AddJoin(order, new LeftJoin()); 

        /// <summary>
        /// Add a left join to the select query. Aliases are auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddLeftJoin(string tableName, IEnumerable<string> columns, string clause) =>
            AddLeftJoin(tableName, "", columns, clause);

        /// <summary>
        /// Add a left join to the select query. Aliases are auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddLeftJoin(string tableName, IEnumerable<string> columns, Clause clause) =>
            AddLeftJoin(tableName, "", columns, clause);

        /// <summary>
        /// Add a left join to the select query. Aliases are auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddLeftJoin(string tableName, string tableAlias, IEnumerable<string> columns, string clause) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause), new LeftJoin());

        /// <summary>
        /// Add a left join to the select query. Aliases are auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddLeftJoin(string tableName, string tableAlias, IEnumerable<string> columns, Clause clause) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause), new LeftJoin());

        /// <summary>
        /// Add a left join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddLeftJoin(string tableName, IEnumerable<string> columns, string clause, bool autoGenerateAliases) =>
            AddLeftJoin(tableName, "", columns, clause, autoGenerateAliases);

        /// <summary>
        /// Add a left join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddLeftJoin(string tableName, IEnumerable<string> columns, Clause clause, bool autoGenerateAliases) =>
            AddLeftJoin(tableName, "", columns, clause, autoGenerateAliases);

        /// <summary>
        /// Add a left join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddLeftJoin(string tableName, string tableAlias, IEnumerable<string> columns, string clause, bool autoGenerateAliases) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause, autoGenerateAliases), new LeftJoin());

        /// <summary>
        /// Add a left join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddLeftJoin(string tableName, string tableAlias, IEnumerable<string> columns, Clause clause, bool autoGenerateAliases) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause, autoGenerateAliases), new LeftJoin());

        /// <summary>
        /// Add a left join to the select query. Aliases are not auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddLeftJoin(string tableName, IEnumerable<Tuple<string, string>> columns, string clause) =>
            AddLeftJoin(tableName, "", columns, clause);

        /// <summary>
        /// Add a left join to the select query. Aliases are not auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddLeftJoin(string tableName, IEnumerable<Tuple<string, string>> columns, Clause clause) =>
            AddLeftJoin(tableName, "", columns, clause);

        /// <summary>
        /// Add a left join to the select query. Aliases are not auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddLeftJoin(string tableName, string tableAlias, IEnumerable<Tuple<string, string>> columns, string clause) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause), new LeftJoin());

        /// <summary>
        /// Add a left join to the select query. Aliases are not auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddLeftJoin(string tableName, string tableAlias, IEnumerable<Tuple<string, string>> columns, Clause clause) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause), new LeftJoin());

        /// <summary>
        /// Add a left join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddLeftJoin(string tableName, IEnumerable<Tuple<string, string>> columns, string clause, bool autoGenerateAliases) =>
            AddLeftJoin(tableName, "", columns, clause, autoGenerateAliases);

        /// <summary>
        /// Add a left join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddLeftJoin(string tableName, IEnumerable<Tuple<string, string>> columns, Clause clause, bool autoGenerateAliases) =>
            AddLeftJoin(tableName, "", columns, clause, autoGenerateAliases);

        /// <summary>
        /// Add a left join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddLeftJoin(string tableName, string tableAlias, IEnumerable<Tuple<string, string>> columns, string clause, bool autoGenerateAliases) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause, autoGenerateAliases), new LeftJoin());

        /// <summary>
        /// Add a left join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddLeftJoin(string tableName, string tableAlias, IEnumerable<Tuple<string, string>> columns, Clause clause, bool autoGenerateAliases) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause, autoGenerateAliases), new LeftJoin());

        /// <summary>
        /// Add a right join to the select query.
        /// </summary>
        /// <param name="order">The order specifying the information for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddRightJoin(SelectQueryOrder order) =>
            AddJoin(order, new RightJoin()); 

        /// <summary>
        /// Add a right join to the select query. Aliases are auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddRightJoin(string tableName, IEnumerable<string> columns, string clause) =>
            AddRightJoin(tableName, "", columns, clause);

        /// <summary>
        /// Add a right join to the select query. Aliases are auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddRightJoin(string tableName, IEnumerable<string> columns, Clause clause) =>
            AddRightJoin(tableName, "", columns, clause);

        /// <summary>
        /// Add a right join to the select query. Aliases are auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddRightJoin(string tableName, string tableAlias, IEnumerable<string> columns, string clause) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause), new RightJoin());

        /// <summary>
        /// Add a right join to the select query. Aliases are auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddRightJoin(string tableName, string tableAlias, IEnumerable<string> columns, Clause clause) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause), new RightJoin());

        /// <summary>
        /// Add a right join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddRightJoin(string tableName, IEnumerable<string> columns, string clause, bool autoGenerateAliases) =>
            AddRightJoin(tableName, "", columns, clause, autoGenerateAliases);

        /// <summary>
        /// Add a right join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddRightJoin(string tableName, IEnumerable<string> columns, Clause clause, bool autoGenerateAliases) =>
            AddRightJoin(tableName, "", columns, clause, autoGenerateAliases);

        /// <summary>
        /// Add a right join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddRightJoin(string tableName, string tableAlias, IEnumerable<string> columns, string clause, bool autoGenerateAliases) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause, autoGenerateAliases), new RightJoin());

        /// <summary>
        /// Add a right join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddRightJoin(string tableName, string tableAlias, IEnumerable<string> columns, Clause clause, bool autoGenerateAliases) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause, autoGenerateAliases), new RightJoin());

        /// <summary>
        /// Add a right join to the select query. Aliases are not auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddRightJoin(string tableName, IEnumerable<Tuple<string, string>> columns, string clause) =>
            AddRightJoin(tableName, "", columns, clause);

        /// <summary>
        /// Add a right join to the select query. Aliases are not auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddRightJoin(string tableName, IEnumerable<Tuple<string, string>> columns, Clause clause) =>
            AddRightJoin(tableName, "", columns, clause);

        /// <summary>
        /// Add a right join to the select query. Aliases are not auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddRightJoin(string tableName, string tableAlias, IEnumerable<Tuple<string, string>> columns, string clause) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause), new RightJoin());

        /// <summary>
        /// Add a right join to the select query. Aliases are not auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddRightJoin(string tableName, string tableAlias, IEnumerable<Tuple<string, string>> columns, Clause clause) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause), new RightJoin());

        /// <summary>
        /// Add a right join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddRightJoin(string tableName, IEnumerable<Tuple<string, string>> columns, string clause, bool autoGenerateAliases) =>
            AddRightJoin(tableName, "", columns, clause, autoGenerateAliases);

        /// <summary>
        /// Add a right join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddRightJoin(string tableName, IEnumerable<Tuple<string, string>> columns, Clause clause, bool autoGenerateAliases) =>
            AddRightJoin(tableName, "", columns, clause, autoGenerateAliases);

        /// <summary>
        /// Add a right join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddRightJoin(string tableName, string tableAlias, IEnumerable<Tuple<string, string>> columns, string clause, bool autoGenerateAliases) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause, autoGenerateAliases), new RightJoin());

        /// <summary>
        /// Add a right join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddRightJoin(string tableName, string tableAlias, IEnumerable<Tuple<string, string>> columns, Clause clause, bool autoGenerateAliases) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause, autoGenerateAliases), new RightJoin());

        /// <summary>
        /// Add an inner join to the select query.
        /// </summary>
        /// <param name="order">The order specifying the information for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddInnerJoin(SelectQueryOrder order) =>
            AddJoin(order, new InnerJoin()); 

        /// <summary>
        /// Add an inner join to the select query. Aliases are auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddInnerJoin(string tableName, IEnumerable<string> columns, string clause) =>
            AddInnerJoin(tableName, "", columns, clause);

        /// <summary>
        /// Add an inner join to the select query. Aliases are auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddInnerJoin(string tableName, IEnumerable<string> columns, Clause clause) =>
            AddInnerJoin(tableName, "", columns, clause);

        /// <summary>
        /// Add an inner join to the select query. Aliases are auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddInnerJoin(string tableName, string tableAlias, IEnumerable<string> columns, string clause) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause), new InnerJoin());

        /// <summary>
        /// Add an inner join to the select query. Aliases are auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddInnerJoin(string tableName, string tableAlias, IEnumerable<string> columns, Clause clause) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause), new InnerJoin());

        /// <summary>
        /// Add an inner join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddInnerJoin(string tableName, IEnumerable<string> columns, string clause, bool autoGenerateAliases) =>
            AddInnerJoin(tableName, "", columns, clause, autoGenerateAliases);

        /// <summary>
        /// Add an inner join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddInnerJoin(string tableName, IEnumerable<string> columns, Clause clause, bool autoGenerateAliases) =>
            AddInnerJoin(tableName, "", columns, clause, autoGenerateAliases);

        /// <summary>
        /// Add an inner join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddInnerJoin(string tableName, string tableAlias, IEnumerable<string> columns, string clause, bool autoGenerateAliases) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause, autoGenerateAliases), new InnerJoin());

        /// <summary>
        /// Add an inner join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddInnerJoin(string tableName, string tableAlias, IEnumerable<string> columns, Clause clause, bool autoGenerateAliases) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause, autoGenerateAliases), new InnerJoin());

        /// <summary>
        /// Add an inner join to the select query. Aliases are not auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddInnerJoin(string tableName, IEnumerable<Tuple<string, string>> columns, string clause) =>
            AddInnerJoin(tableName, "", columns, clause);

        /// <summary>
        /// Add an inner join to the select query. Aliases are not auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddInnerJoin(string tableName, IEnumerable<Tuple<string, string>> columns, Clause clause) =>
            AddInnerJoin(tableName, "", columns, clause);

        /// <summary>
        /// Add an inner join to the select query. Aliases are not auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddInnerJoin(string tableName, string tableAlias, IEnumerable<Tuple<string, string>> columns, string clause) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause), new InnerJoin());

        /// <summary>
        /// Add an inner join to the select query. Aliases are not auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddInnerJoin(string tableName, string tableAlias, IEnumerable<Tuple<string, string>> columns, Clause clause) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause), new InnerJoin());

        /// <summary>
        /// Add an inner join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddInnerJoin(string tableName, IEnumerable<Tuple<string, string>> columns, string clause, bool autoGenerateAliases) =>
            AddInnerJoin(tableName, "", columns, clause, autoGenerateAliases);

        /// <summary>
        /// Add an inner join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddInnerJoin(string tableName, IEnumerable<Tuple<string, string>> columns, Clause clause, bool autoGenerateAliases) =>
            AddInnerJoin(tableName, "", columns, clause, autoGenerateAliases);

        /// <summary>
        /// Add an inner join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddInnerJoin(string tableName, string tableAlias, IEnumerable<Tuple<string, string>> columns, string clause, bool autoGenerateAliases) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause, autoGenerateAliases), new InnerJoin());

        /// <summary>
        /// Add an inner join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddInnerJoin(string tableName, string tableAlias, IEnumerable<Tuple<string, string>> columns, Clause clause, bool autoGenerateAliases) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause, autoGenerateAliases), new InnerJoin());

        /// <summary>
        /// Add a full outer join to the select query.
        /// </summary>
        /// <param name="order">The order specifying the information for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddFullOuterJoin(SelectQueryOrder order) =>
            AddJoin(order, new FullOuterJoin()); 

        /// <summary>
        /// Add a full outer join to the select query. Aliases are auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddFullOuterJoin(string tableName, IEnumerable<string> columns, string clause) =>
            AddFullOuterJoin(tableName, "", columns, clause);

        /// <summary>
        /// Add a full outer join to the select query. Aliases are auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddFullOuterJoin(string tableName, IEnumerable<string> columns, Clause clause) =>
            AddFullOuterJoin(tableName, "", columns, clause);

        /// <summary>
        /// Add a full outer join to the select query. Aliases are auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddFullOuterJoin(string tableName, string tableAlias, IEnumerable<string> columns, string clause) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause), new FullOuterJoin());

        /// <summary>
        /// Add a full outer join to the select query. Aliases are auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddFullOuterJoin(string tableName, string tableAlias, IEnumerable<string> columns, Clause clause) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause), new FullOuterJoin());

        /// <summary>
        /// Add a full outer join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddFullOuterJoin(string tableName, IEnumerable<string> columns, string clause, bool autoGenerateAliases) =>
            AddFullOuterJoin(tableName, "", columns, clause, autoGenerateAliases);

        /// <summary>
        /// Add a full outer join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddFullOuterJoin(string tableName, IEnumerable<string> columns, Clause clause, bool autoGenerateAliases) =>
            AddFullOuterJoin(tableName, "", columns, clause, autoGenerateAliases);

        /// <summary>
        /// Add a full outer join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddFullOuterJoin(string tableName, string tableAlias, IEnumerable<string> columns, string clause, bool autoGenerateAliases) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause, autoGenerateAliases), new FullOuterJoin());

        /// <summary>
        /// Add a full outer join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddFullOuterJoin(string tableName, string tableAlias, IEnumerable<string> columns, Clause clause, bool autoGenerateAliases) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause, autoGenerateAliases), new FullOuterJoin());

        /// <summary>
        /// Add a full outer join to the select query. Aliases are not auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddFullOuterJoin(string tableName, IEnumerable<Tuple<string, string>> columns, string clause) =>
            AddFullOuterJoin(tableName, "", columns, clause);

        /// <summary>
        /// Add a full outer join to the select query. Aliases are not auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddFullOuterJoin(string tableName, IEnumerable<Tuple<string, string>> columns, Clause clause) =>
            AddFullOuterJoin(tableName, "", columns, clause);

        /// <summary>
        /// Add a full outer join to the select query. Aliases are not auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddFullOuterJoin(string tableName, string tableAlias, IEnumerable<Tuple<string, string>> columns, string clause) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause), new FullOuterJoin());

        /// <summary>
        /// Add a full outer join to the select query. Aliases are not auto-generated.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddFullOuterJoin(string tableName, string tableAlias, IEnumerable<Tuple<string, string>> columns, Clause clause) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause), new FullOuterJoin());

        /// <summary>
        /// Add a full outer join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddFullOuterJoin(string tableName, IEnumerable<Tuple<string, string>> columns, string clause, bool autoGenerateAliases) =>
            AddFullOuterJoin(tableName, "", columns, clause, autoGenerateAliases);

        /// <summary>
        /// Add a full outer join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddFullOuterJoin(string tableName, IEnumerable<Tuple<string, string>> columns, Clause clause, bool autoGenerateAliases) =>
            AddFullOuterJoin(tableName, "", columns, clause, autoGenerateAliases);

        /// <summary>
        /// Add a full outer join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddFullOuterJoin(string tableName, string tableAlias, IEnumerable<Tuple<string, string>> columns, string clause, bool autoGenerateAliases) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause, autoGenerateAliases), new FullOuterJoin());

        /// <summary>
        /// Add a full outer join to the select query.
        /// </summary>
        /// <param name="tableName">Table name used as data source.</param>
        /// <param name="tableAlias">Alias of table to use. An empty string will cause table name to be used as alias.</param>
        /// <param name="columns">The requested column names with aliases.</param>
        /// <param name="clause">The clause for the join.</param>
        /// <param name="autoGenerateAliases">Whether the aliases should be autogenerated.</param>
        /// <returns>The new select query.</returns>
        public SelectQuery AddFullOuterJoin(string tableName, string tableAlias, IEnumerable<Tuple<string, string>> columns, Clause clause, bool autoGenerateAliases) =>
            AddJoin(new SelectQueryOrder(tableName, tableAlias, columns, clause, autoGenerateAliases), new FullOuterJoin());

        /// <summary>
        /// Build select query with no where clause.
        /// </summary>
        /// <returns>A data order complete with parameters, and aliases.</returns>
        public IAliasedDataOrder Build() => Build(Clause.New(), DefaultOptions);

        /// <summary>
        /// Build select query with where clause.
        /// </summary>
        /// <param name="whereClause">A where clause used to filter results.</param>
        /// <returns>A data order complete with parameters, and aliases.</returns>
        public IAliasedDataOrder Build(string whereClause) => Build(Clause.New().AddClause(whereClause), DefaultOptions);

        /// <summary>
        /// Build select query with where clause.
        /// </summary>
        /// <param name="whereClause">A where clause used to filter results.</param>
        /// <returns>A data order complete with parameters, and aliases.</returns>
        public IAliasedDataOrder Build(Clause whereClause) => Build(Clause.New().AddClause(whereClause), DefaultOptions);

        /// <summary>
        /// Build select query with where clause.
        /// </summary>
        /// <param name="options">The options to use when building the query.</param>
        /// <returns>A data order complete with parameters, and aliases.</returns>
        public IAliasedDataOrder Build(SelectQueryBuildOptions options) => Build(Clause.New(), options);

        /// <summary>
        /// Build select query with a where clause.
        /// </summary>
        /// <param name="whereClause">A where clause used to filter results.</param>
        /// <param name="options">The options to use when building the query.</param>
        /// <returns>A data order complete with parameters, and aliases in use.</returns>
        public IAliasedDataOrder Build(string whereClause, SelectQueryBuildOptions options) => Build(Clause.New().AddClause(whereClause), options);

        /// <summary>
        /// Build select query with a where clause.
        /// </summary>
        /// <param name="whereClause">A where clause used to filter results.</param>
        /// <param name="options">The options to use when building the query.</param>
        /// <returns>A data order complete with parameters, and aliases in use.</returns>
        public IAliasedDataOrder Build(Clause whereClause, SelectQueryBuildOptions options) {
            var orderListCopy = new List<SelectQueryOrder>(_orders);
            var parameters = new List<KeyValuePair<string, object>>();

            string tableJoin = orderListCopy.First().TableDefinition;
            foreach (var order in _orders.Skip(1)) {
                SimpleDataOrder joinOrder = order.JoinClause.Build();
                if (string.IsNullOrEmpty(joinOrder.Query)) {
                    orderListCopy.Remove(order);
                    continue;
                }
                tableJoin += $"\r\n{order.JoinType.GetJoinText()} JOIN{order.TableDefinition} ON{joinOrder.Query.Replace("\r\n", " ")}";
                parameters.AddRange(joinOrder.Parameters);
            }

            List<IAlias> aliases =
                orderListCopy.SelectMany(order => {
                    Func<Tuple<string, string>, Alias> AliasProducer = order.AutoGenerateAliases ? AutoGenerateAlias(order) : UseProvidedAlias(order);
                    return order.ColumnAliasPairs.Select(AliasProducer);
                }).ToList<IAlias>();

            string subQuery = string.Join(",\r\n", aliases.Select(alias =>
                $"    {alias.Name}.{alias.Data.Item1}{(string.IsNullOrWhiteSpace(alias.Data.Item2) ? "" : $" AS {alias.Data.Item2}")}"));

            string flag =
                $"{(options.DistinctOnly ? " DISTINCT" : " ALL")}{(options.Limit.HasValue ? $" TOP({options.Limit})" : "")}";

            string query =
                $"SELECT{flag}"
                + $"\r\n{subQuery}"
                + $"\r\nFROM{tableJoin}";

            SimpleDataOrder whereClauseDataOrder = whereClause.Build();
            if (string.IsNullOrEmpty(whereClauseDataOrder.Query) == false)
                query += "\r\nWHERE" + whereClauseDataOrder.Query;

            if (options.OrderBy.Any()) {
                query += $"\r\nORDER BY{string.Join(",", options.OrderBy.Select(tuple => $"\r\n    {tuple.Item1}{(tuple.Item2 ? " DESC" : "")}"))}";
            }

            return new AliasedDataOrder(query, parameters.Concat(whereClauseDataOrder.Parameters), aliases);
        }

        private SelectQuery AddJoin(SelectQueryOrder order, IJoinType joinType) {
            order.JoinType = joinType;
            return new SelectQuery(_orders, order);
        }

        private static Func<Tuple<string, string>, Alias> AutoGenerateAlias(SelectQueryOrder order) =>
            pair => Alias.Create(order.WorkingTableName, pair.Item1, order.WorkingTableName + pair.Item1);
        private static Func<Tuple<string, string>, Alias> UseProvidedAlias(SelectQueryOrder order) =>
            pair => Alias.Create(order.WorkingTableName, pair.Item1, pair.Item2);

    }
}